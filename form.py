import os
import re
import datetime
from pathlib import Path

# 配置参数
REPORT_DIR = "weekly_reports"  # 周报文件存放目录
README_PATH = "README.md"      # README 文件路径
MAX_ENTRIES = 10               # 最多显示的周报数量
DATE_PATTERN = r"(\d{4}-\d{2}-\d{2})_(第\d+期)_.*"  # 文件名匹配规则（示例：2025-04-30_第1期_智脑时代周报.md）

def extract_report_info(filename):
    """从文件名中提取日期和期数"""
    match = re.match(DATE_PATTERN, filename)
    if not match:
        return None
    date_str, issue = match.groups()
    return {
        "date": date_str,
        "issue": issue,
        "filename": filename,
    }

def generate_markdown(reports):
    """生成 Markdown 表格内容"""
    markdown = "### 📌 最新周报\n\n"
    markdown += "| 日期 | 期数 | 文件 |\n"
    markdown += "|------|------|------|\n"
    for report in reports:
        file_url = f"https://github.com/your-username/your-repo/blob/main/{REPORT_DIR}/{report['filename']}"
        markdown += f"| {report['date']} | {report['issue']} | [{report['filename']}]({file_url}) |\n"
    return markdown

def update_readme():
    # 获取所有周报文件
    report_dir = Path(REPORT_DIR)
    files = [f.name for f in report_dir.iterdir() if f.is_file()]
    
    # 提取并排序
    reports = []
    for filename in files:
        info = extract_report_info(filename)
        if info:
            reports.append(info)
    reports.sort(key=lambda x: datetime.datetime.strptime(x["date"], "%Y-%m-%d"), reverse=True)
    reports = reports[:MAX_ENTRIES]  # 取最新 MAX_ENTRIES 期
    
    # 生成 Markdown 内容
    new_content = generate_markdown(reports)
    
    # 读取并更新 README
    with open(README_PATH, "r", encoding="utf-8") as f:
        readme_lines = f.readlines()
    
    start_marker = "<!-- AUTOGENERATED_REPORTS -->\n"
    end_marker = "<!-- END_AUTOGENERATED -->\n"
    new_readme = []
    in_section = False
    
    for line in readme_lines:
        if line == start_marker:
            in_section = True
            new_readme.append(line)
            new_readme.append(new_content + "\n")
        elif line == end_marker:
            in_section = False
            new_readme.append(line)
        elif not in_section:
            new_readme.append(line)
    
    with open(README_PATH, "w", encoding="utf-8") as f:
        f.writelines(new_readme)
    
    print("README.md 已更新。")

if __name__ == "__main__":
    update_readme()